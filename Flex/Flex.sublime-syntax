%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - flex
scope: source.flex
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.flex
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '/\*'
      scope: punctuation.definition.comment.flex
      push: line_comment

    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '(extern\b|while|if|else|case|return\b|EOF)'
      scope: keyword.control.flex
    - match: '(int\b|\bstring\b)'
      scope: support.type.stdint.flex
    #type defines of the character
    - match: '(true|TRUE|FALSE|false)'
      scope: constant.language.flex 
    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.flex
    #defines
    - match: '(#define\b |#include\b|#undef\b)'
      scope: keyword.control.flex
    #operators
    - match: '(?:\+\+|--)'
      scope: keyword.operator.arithmetic.flex
    #puntuations
    - match: '->'
      scope: punctuation.accessor.flex
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.c

    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.flex
      push: preprocessor-line-continuation
    - match: '\\(\s+?)$'
      captures:
        1: invalid.illegal.space-after-continuation.flex 
      push: preprocessor-line-continuation



  double_quoted_string:
    - meta_scope: string.quoted.double.flex
    - match: '\\.'
      scope: constant.character.escape.flex
    - match: '"'
      scope: punctuation.definition.string.end.flex
      pop: true

  line_comment:
    - meta_scope: comment.line.flex
    - match: '\*/'
      scope: punctuation.definition.comment.flex
      pop: true
  preprocessor-line-continuation:
    - match: '$\n'
      pop: true
